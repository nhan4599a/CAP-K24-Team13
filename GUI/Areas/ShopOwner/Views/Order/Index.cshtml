@using Shared.DTOs
@using Shared.Models
@using System.Collections
@model List<OrderDTO>
@section SideBar {
    @await Component.InvokeAsync("SideBar", new { activeItem = "orders" });
}
@{
    var classifiedOrderList = new Dictionary<InvoiceStatus, List<OrderDTO>>();
    classifiedOrderList[InvoiceStatus.New] = new List<OrderDTO>();
    classifiedOrderList[InvoiceStatus.Confirmed] = new List<OrderDTO>();
    classifiedOrderList[InvoiceStatus.ShipperReceived] = new List<OrderDTO>();
    classifiedOrderList[InvoiceStatus.Succeed] = new List<OrderDTO>();
    classifiedOrderList[InvoiceStatus.Canceled] = new List<OrderDTO>();

    foreach (var order in Model)
    {
        classifiedOrderList[order.Status].Add(order);
    }
}
<div class="row">
    <div class="col-12">
        <div class="card my-4">
            <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="border-radius-lg pt-4 pb-3 bg-gradient-primary-dark shadow">
                    <h6 class="text-white text-capitalize ps-3">Order management board</h6>
                </div>
            </div>
            <div class="card-body px-0 pb-2">
                <div class="table-responsive p-0">
                </div>
                <div class="drag-container"></div>
                <div class="board">
                    <div class="board-column confirm">
                        <div class="board-column-container" data-status="0">
                            <div class="board-column-header">Confirm</div>
                            <div class="board-column-content-wrapper">
                                <div class="board-column-content">
                                    @foreach (var order in classifiedOrderList[InvoiceStatus.New])
                                    {
                                        @await Component.InvokeAsync("OrderItem", new { order });
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="board-column in-process">
                        <div class="board-column-container" data-status="1">
                            <div class="board-column-header">In process</div>
                            <div class="board-column-content-wrapper">
                                <div class="board-column-content">
                                    @foreach (var order in classifiedOrderList[InvoiceStatus.Confirmed])
                                    {
                                        @await Component.InvokeAsync("OrderItem", new { order });
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="board-column deliveried">
                        <div class="board-column-container" data-status="2">
                            <div class="board-column-header">Deliveried</div>
                            <div class="board-column-content-wrapper">
                                <div class="board-column-content">
                                    @foreach (var order in classifiedOrderList[InvoiceStatus.ShipperReceived])
                                    {
                                        @await Component.InvokeAsync("OrderItem", new { order });
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="board-column done">
                        <div class="board-column-container" data-status="3">
                            <div class="board-column-header">Done</div>
                            <div class="board-column-content-wrapper">
                                <div class="board-column-content">
                                    @foreach (var order in classifiedOrderList[InvoiceStatus.Succeed])
                                    {
                                        @await Component.InvokeAsync("OrderItem", new { order });
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="board-column canceled">
                        <div class="board-column-container" data-status="4">
                            <div class="board-column-header">Canceled</div>
                            <div class="board-column-content-wrapper">
                                <div class="board-column-content">
                                    @foreach (var order in classifiedOrderList[InvoiceStatus.Canceled])
                                    {
                                        @await Component.InvokeAsync("OrderItem", new { order });
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/web-animations/2.3.2/web-animations.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/haltu/muuri@0.9.3/dist/muuri.min.js"></script>
<script src="@Url.Content("~/assets/shop-owner/js/internal/kanban.js")" type="text/javascript"></script>
}